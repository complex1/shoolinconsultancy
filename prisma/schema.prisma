// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Admin users for the admin panel
model AdminUser {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String   // Will store hashed passwords
  name      String
  role      String   @default("admin")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Contact form submissions
model ContactSubmission {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  phone     String?
  subject   String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Testimonials
model Testimonial {
  id        Int      @id @default(autoincrement())
  name      String
  position  String
  company   String
  content   String
  rating    Int      @default(5)
  imageUrl  String?
  featured  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Services
model Service {
  id             Int      @id @default(autoincrement())
  title          String
  description    String
  longDescription String   // SQLite doesn't support @db.Text
  iconUrl        String
  slug           String   @unique
  featured       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// Team members (consultants, attorneys, etc.)
model TeamMember {
  id        Int        @id @default(autoincrement())
  name      String
  position  String
  bio       String     // SQLite doesn't support @db.Text
  imageUrl  String?
  order     Int        @default(0)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  blogPosts BlogPost[] // Added relation field
}

// Blog posts
model BlogPost {
  id          Int          @id @default(autoincrement())
  title       String
  slug        String       @unique
  content     String       // SQLite doesn't support @db.Text
  excerpt     String?
  imageUrl    String?
  published   Boolean      @default(false)
  authorId    Int?
  author      TeamMember?  @relation(fields: [authorId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  tags        BlogPostTag[]
}

// Tags for blog posts
model Tag {
  id        Int           @id @default(autoincrement())
  name      String        @unique
  posts     BlogPostTag[]
  createdAt DateTime      @default(now())
}

// Many-to-many relationship between blog posts and tags
model BlogPostTag {
  postId    Int
  post      BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  tagId     Int
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
}

// Statistics that can be displayed on the website
model Statistic {
  id        Int      @id @default(autoincrement())
  label     String
  value     String
  icon      String?
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Media files uploaded through the admin panel
model Media {
  id          Int      @id @default(autoincrement())
  filename    String   // Original filename
  filepath    String   // Path relative to public directory
  mimetype    String   // File MIME type
  size        Int      // File size in bytes
  title       String?  // Optional title for the media
  description String?  // Optional description
  altText     String?  // Alternative text for accessibility
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// SEO meta tags for pages or entities
model SEO {
  id          Int      @id @default(autoincrement())
  page        String   // e.g. '/about', '/services', or a dynamic route
  title       String?
  description String?
  keywords    String?
  image       String?  // Open Graph image URL
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // Optionally, you can add a relation to BlogPost, Service, etc.
  // blogPost   BlogPost? @relation(fields: [blogPostId], references: [id])
  // blogPostId Int?
}
