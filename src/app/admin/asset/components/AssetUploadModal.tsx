import React, { useState } from 'react';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faImage, faCode } from '@fortawesome/free-solid-svg-icons';

interface AssetUploadModalProps {
  isOpen: boolean;
  onClose: () => void;
  onUploadSuccess: () => Promise<void>;
  setToast: (toast: { message: string; type: 'success' | 'error' | 'info' } | null) => void;
}

const AssetUploadModal: React.FC<AssetUploadModalProps> = ({
  isOpen,
  onClose,
  onUploadSuccess,
  setToast
}) => {
  // State management
  const [uploadMode, setUploadMode] = useState<'file' | 'svg'>('file');
  const [isUploading, setIsUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [error, setError] = useState<string | null>(null);
  
  // File upload state
  const [file, setFile] = useState<File | null>(null);
  const [fileName, setFileName] = useState('');
  const [fileAlt, setFileAlt] = useState('');
  
  // SVG upload state
  const [svgName, setSvgName] = useState('');
  const [svgCode, setSvgCode] = useState('');
  
  // Handle file input change
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const selectedFile = e.target.files[0];
      setFile(selectedFile);
      setFileName(selectedFile.name);
      // Reset progress
      setUploadProgress(0);
    }
  };

  // Handle form submission for file upload
  const handleFileUpload = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!file) {
      setError('Please select a file to upload');
      return;
    }
    
    try {
      setIsUploading(true);
      setUploadProgress(10);
      
      const formData = new FormData();
      formData.append('file', file);
      formData.append('name', fileName || file.name);
      formData.append('alt', fileAlt);
      
      setUploadProgress(30);
      
      const response = await fetch('/api/admin/asset', {
        method: 'POST',
        body: formData,
      });
      
      setUploadProgress(70);
      
      const data = await response.json();
      
      setUploadProgress(100);
      
      if (!response.ok) {
        throw new Error(data.message || 'Failed to upload file');
      }
      
      // Notify parent component about successful upload
      await onUploadSuccess();
      
      // Show success toast
      setToast({
        message: 'File uploaded successfully',
        type: 'success'
      });
      
      // Close modal and reset form
      onClose();
      setFile(null);
      setFileName('');
      setFileAlt('');
      
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to upload file');
      setToast({
        message: err instanceof Error ? err.message : 'Failed to upload file',
        type: 'error'
      });
    } finally {
      setIsUploading(false);
    }
  };

  // Handle form submission for SVG code
  const handleSvgSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!svgName || !svgCode) {
      setError('Please provide both name and SVG code');
      return;
    }
    
    try {
      setIsUploading(true);
      
      const response = await fetch('/api/admin/asset', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: svgName,
          url: '', // Will be generated by backend
          isSvg: true,
          svgCode: svgCode,
          alt: svgName
        }),
      });
      
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.message || 'Failed to save SVG');
      }
      
      // Notify parent component about successful upload
      await onUploadSuccess();
      
      // Show success toast
      setToast({
        message: 'SVG saved successfully',
        type: 'success'
      });
      
      // Close modal and reset form
      onClose();
      setSvgName('');
      setSvgCode('');
      
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to save SVG');
      setToast({
        message: err instanceof Error ? err.message : 'Failed to save SVG',
        type: 'error'
      });
    } finally {
      setIsUploading(false);
    }
  };

  if (!isOpen) return null;
  
  return (
    <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50 p-4 overflow-y-auto">
      <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-screen overflow-y-auto">
        <div className="p-6 border-b border-gray-200">
          <div className="flex justify-between items-center">
            <h3 className="text-lg font-medium text-gray-900">
              Add New Asset
            </h3>
            <button
              onClick={onClose}
              className="text-gray-400 hover:text-gray-500"
              aria-label="Close"
            >
              <span className="sr-only">Close</span>
              <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </div>
        
        <div className="p-6">
          {error && (
            <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
              {error}
            </div>
          )}

          <div className="mb-6 flex border border-gray-200 rounded-lg overflow-hidden">
            <button
              onClick={() => setUploadMode('file')}
              className={`flex-1 py-2 px-4 text-center ${
                uploadMode === 'file' 
                  ? 'bg-blue-500 text-white' 
                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
              }`}
            >
              <FontAwesomeIcon icon={faImage} className="mr-2" />
              Upload File
            </button>
            <button
              onClick={() => setUploadMode('svg')}
              className={`flex-1 py-2 px-4 text-center ${
                uploadMode === 'svg' 
                  ? 'bg-blue-500 text-white' 
                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
              }`}
            >
              <FontAwesomeIcon icon={faCode} className="mr-2" />
              Add SVG Code
            </button>
          </div>
          
          {uploadMode === 'file' ? (
            <form onSubmit={handleFileUpload}>
              <div className="mb-6">
                <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-gray-400 transition-colors">
                  <input 
                    type="file" 
                    id="file-upload" 
                    className="hidden" 
                    onChange={handleFileChange}
                  />
                  <label htmlFor="file-upload" className="cursor-pointer">
                    <div className="flex flex-col items-center justify-center py-4">
                      <FontAwesomeIcon icon={faImage} className="text-gray-400 text-4xl mb-2" />
                      <p className="text-gray-700">Click to select file or drag and drop</p>
                      <p className="text-gray-500 text-sm mt-1">
                        {file ? file.name : 'PNG, JPG, GIF, SVG up to 5MB'}
                      </p>
                    </div>
                  </label>
                </div>
              </div>
              
              {file && (
                <>
                  <div className="mb-4">
                    <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="fileName">
                      Asset Name
                    </label>
                    <input
                      className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                      id="fileName"
                      type="text"
                      value={fileName}
                      onChange={e => setFileName(e.target.value)}
                      placeholder="Asset name"
                    />
                  </div>
                  
                  <div className="mb-4">
                    <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="fileAlt">
                      Alt Text
                    </label>
                    <input
                      className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                      id="fileAlt"
                      type="text"
                      value={fileAlt}
                      onChange={e => setFileAlt(e.target.value)}
                      placeholder="Descriptive alt text"
                    />
                  </div>
                  
                  {isUploading && (
                    <div className="mb-4">
                      <div className="w-full bg-gray-200 rounded-full h-2">
                        <div
                          className="bg-blue-500 h-2 rounded-full transition-all duration-300"
                          style={{ width: `${uploadProgress}%` }}
                        ></div>
                      </div>
                      <p className="text-sm text-gray-600 mt-1 text-center">
                        {uploadProgress === 100 ? 'Processing...' : `Uploading: ${uploadProgress}%`}
                      </p>
                    </div>
                  )}
                </>
              )}
              
              <div className="flex justify-end gap-2 mt-6">
                <button
                  type="button"
                  onClick={onClose}
                  className="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
                  disabled={isUploading}
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
                  disabled={!file || isUploading}
                >
                  {isUploading ? 'Uploading...' : 'Upload File'}
                </button>
              </div>
            </form>
          ) : (
            <form onSubmit={handleSvgSubmit}>
              <div className="mb-4">
                <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="svgName">
                  SVG Name
                </label>
                <input
                  className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                  id="svgName"
                  type="text"
                  value={svgName}
                  onChange={e => setSvgName(e.target.value)}
                  placeholder="Icon name"
                  required
                />
              </div>
              
              <div className="mb-4">
                <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="svgCode">
                  SVG Code
                </label>
                <textarea
                  className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline font-mono text-sm"
                  id="svgCode"
                  rows={10}
                  value={svgCode}
                  onChange={e => setSvgCode(e.target.value)}
                  placeholder="<svg>...</svg>"
                  required
                />
                <p className="text-xs text-gray-500 mt-1">
                  Paste the complete SVG code starting with &lt;svg&gt; and ending with &lt;/svg&gt;
                </p>
              </div>
              
              <div className="flex justify-end gap-2 mt-6">
                <button
                  type="button"
                  onClick={onClose}
                  className="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
                  disabled={isUploading}
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
                  disabled={!svgName || !svgCode || isUploading}
                >
                  {isUploading ? 'Saving...' : 'Save SVG'}
                </button>
              </div>
            </form>
          )}
        </div>
      </div>
    </div>
  );
};

export default AssetUploadModal;
